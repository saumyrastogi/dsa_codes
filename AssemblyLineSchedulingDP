#include <iostream>
#include<vector>
#include<bits/stdc++.h>
#include<string>
#include<cmath>
#define ll long long
#define pb push_back
#define vc vector
#define vi vc<long long int>
#define setbits(x)  __builtin_popcountll(x)
#define zerobits(x) __builtin_ctzll(x)
const int mod = 1e9+7;
const int mod2 = 998244353;
const long long inf = 1e18;
const long double PI = 3.141592653589793;
using namespace std;
#define NUM_LINE 2
#define NUM_STATION 4
int add(int a,int b,int mod=mod){int res=(a+b)%mod;return (res<0)?res+mod:res;}

ll int binarySearch(vector<ll int>arr,ll int l,ll int r,ll int x)
{
    if (r >= l) {
       ll int mid = l + (r - l) / 2;
  
        // If the element is present at the middle
        // itself
        if (arr[mid] == x)
            return mid;
  
        // If element is smaller than mid, then
        // it can only be present in left subarray
        if (arr[mid] > x)
            return binarySearch(arr, l, mid - 1, x);
  
        // Else the element can only be present
        // in right subarray
        return binarySearch(arr, mid + 1, r, x);
    }
  
    // We reach here when element is not
    // present in array
    return -1;
}
unsigned ll int getSum(unsigned ll int n)
    {
        unsigned ll int sum = 0;
        while (n != 0) {
            sum = sum + n % 10;
            n = n / 10;
        }
        return sum;
    }

int mul(int a,int b,int mod=mod){int res=(a*1LL*b)%mod;return (res<0)?res+mod:res;}
int dp[NUM_LINE+1][NUM_STATION+1];
int carAssembly(int a[][NUM_STATION],int t[][NUM_STATION],int e[], int x[])
{
    dp[1][1]=e[0]+a[0][0];
    dp[2][1]=e[1]+a[1][0];
    int i;
    for(i=2;i<=NUM_STATION;i++)
    {
        dp[1][i]=min(dp[2][i-1]+t[1][i-1],dp[1][i-1])+a[0][i-1];
        dp[2][i]=min(dp[1][i-1]+t[0][i-1],dp[2][i-1])+a[1][i-1];
    }
    int temp1=dp[1][NUM_STATION]+x[0];
    int temp2=dp[2][NUM_STATION]+x[1];
    if(temp1>temp2)
    return temp2;
    else 
    return temp1;
}
int main()
{
    int a[][NUM_STATION] = {{4, 5, 3, 2},
                            {2, 10, 1, 4}};
    int t[][NUM_STATION] = {{0, 7, 4, 5},
                            {0, 9, 2, 8}};
    int e[2] = {10, 12}, x[2] = {18, 7};
    memset(dp,0,sizeof(dp));
    cout << carAssembly(a, t, e, x);
 
    return 0;
}
	    


