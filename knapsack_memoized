#include <bits/stdc++.h> 
using namespace std; 
int static t[1000][1000];      // take the size of this array according to the constraints and initialize it with -1 using memset in main func.
                               //Observe the arguement changing the knapsack function and make the the argument row and column in matrix.

int max(int a, int b) { return (a > b) ? a : b; } 

int knapSack(int W, int wt[], int val[], int n) 
{ 
	if (n == 0 || W == 0) 
	    return 0; 
		
    if(t[W][n]!=-1)            //if this value is already calculated it will return without recalculating it , hence it runs faster.
        return t[W][n];
    
	if (wt[n - 1] > W) 
		return t[W][n]=knapSack(W, wt, val, n - 1);   // store the value for each w,n pair so tht it can be used later when needed.
    
	else
		return t[W][n]=max( 
			val[n - 1] 
				+ knapSack(W - wt[n - 1], 
						wt, val, n - 1), 
			knapSack(W, wt, val, n - 1)); 
} 

int main() 
{ 
	int val[] = { 1,4,5,7 }; 
	int wt[] = { 1,3,4,5 }; 
	int W = 7; 
	memset(t,-1,sizeof(t));
	int n = sizeof(val) / sizeof(val[0]); 
	cout << knapSack(W, wt, val, n); 
	return 0; 
} 

// This code is contributed by rathbhupendra
