#include <iostream>
#include<vector>
#include<bits/stdc++.h>
#include<string>
#include<cmath>
#define ll long long
#define pb push_back
#define vc vector
#define vi vc<long long int>
#define setbits(x)  __builtin_popcountll(x)
#define zerobits(x) __builtin_ctzll(x)
const int mod = 1e9+7;
const int mod2 = 998244353;
const long long inf = 1e18;
const long double PI = 3.141592653589793;
using namespace std;
#define NUM_LINE 2
#define NUM_STATION 4
int add(int a,int b,int mod=mod){int res=(a+b)%mod;return (res<0)?res+mod:res;}

ll int binarySearch(vector<ll int>arr,ll int l,ll int r,ll int x)
{
    if (r >= l) {
       ll int mid = l + (r - l) / 2;
  
        // If the element is present at the middle
        // itself
        if (arr[mid] == x)
            return mid;
  
        // If element is smaller than mid, then
        // it can only be present in left subarray
        if (arr[mid] > x)
            return binarySearch(arr, l, mid - 1, x);
  
        // Else the element can only be present
        // in right subarray
        return binarySearch(arr, mid + 1, r, x);
    }
  
    // We reach here when element is not
    // present in array
    return -1;
}
unsigned ll int getSum(unsigned ll int n)
    {
        unsigned ll int sum = 0;
        while (n != 0) {
            sum = sum + n % 10;
            n = n / 10;
        }
        return sum;
    }

int mul(int a,int b,int mod=mod){int res=(a*1LL*b)%mod;return (res<0)?res+mod:res;}

int countsuqseq(vector<int>v,int n)
{
    int dp[n];
    int i,j;
    for(i=0;i<n;i++)
    dp[i]=v[i];
    dp[1]+=dp[0];
    dp[2]=max(v[0]+v[1],v[1]+v[2]);
    
    for(i=3;i<=n;i++)
    dp[i]=max(dp[i-1],max(dp[i-2]+v[i],dp[i-3]+v[i-1]+v[i]));

    return dp[n];
}

int main()
{
  
    int n,ans=0,i;
    cin>>n;
    vector<int>v(n);
    for(i=0;i<n;i++)
    cin>>v[i];
    ans=countsuqseq(v,n);
    cout<<ans;
    return 0;
}
	    


