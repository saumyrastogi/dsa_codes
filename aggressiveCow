#include <iostream>
#include<vector>
#include<bits/stdc++.h>
#include<string>
#include<cmath>
#define ll long long
#define pb push_back
#define vc vector
#define vi vc<int>
#define setbits(x)  __builtin_popcountll(x)
#define zerobits(x) __builtin_ctzll(x)
const int mod = 1e9+7;
const int mod2 = 998244353;
const long long inf = 1e18;
const long double PI = 3.141592653589793;
using namespace std;
int add(int a,int b,int mod=mod){int res=(a+b)%mod;return (res<0)?res+mod:res;}

int mul(int a,int b,int mod=mod){int res=(a*1LL*b)%mod;return (res<0)?res+mod:res;}
int main() {
	int t;
	cin>>t;
	while(t--)
	{
	    int n,c,i;
	    cin>>n>>c;
	    vector<int>v(n);
	    for(i=0;i<n;i++)
	    cin>>v[i];
	    sort(v.begin(),v.end());
	    int l=v[0],r=1e9,temp=INT_MIN,tmpcow=c;    // we take the limit as min x cordinate of stall and max range of  x cordinate and apply binary search ,mid represents the 
                                                   distance btw the stall of cows , after cal mid we check whether we can place all cow with minimum mid distance or not , 
                                                   if yes then we cahnge the left to mid+1 and look for even more min distance , if we cant place then we reduce r to mid-1 
	    while(l<=r)
	    {
	        int mid=l+(r-l)/2;
	        tmpcow=c-1;
	        int numb=v[0];
	        for(i=1;i<n;i++)
	        {
	            if(v[i]-numb>=mid)
	            {
	                tmpcow--;
	                numb=v[i];
	            }
	            
	            if(tmpcow==0)
	            break;
	        }
	        if(tmpcow==0)
	        {
	            temp=max(temp,mid);
	            l=mid+1;
	        }
	        else
	        r=mid-1;
	    }
	    
	    cout<<temp<<endl;
	}
	
	return 0;
}
